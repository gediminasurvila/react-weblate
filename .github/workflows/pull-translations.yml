name: Update Translations

on:
  workflow_dispatch:

permissions:
  contents: write

jobs:
  update-i18n:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout main repository (without submodules initially)
        uses: actions/checkout@v4
        with:
          submodules: false
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Git identity
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Clean and Re-initialize Submodule to Latest Remote State
        run: |
          # Dynamically extract the submodule path from .gitmodules.
          # This assumes there's one primary submodule whose path you want to update.
          # It finds the line like 'path = public/locales' and extracts 'public/locales'.
          SUBMODULE_PATH=$(git config --file .gitmodules --get-regexp '^submodule\..*\.path$' | awk '{print $2}')

          if [ -z "$SUBMODULE_PATH" ]; then
            echo "Error: Could not find submodule path in .gitmodules. Please ensure your .gitmodules file is correctly configured."
            exit 1
          fi

          echo "Dynamically determined submodule path: ${SUBMODULE_PATH}"

          echo "Ensuring .gitmodules has the correct entry (should be from initial checkout)."
          cat .gitmodules

          echo "Attempting to deinitialize and remove existing submodule directory to ensure a clean state..."
          git submodule deinit -f "${SUBMODULE_PATH}" || true # Use the extracted path
          rm -rf "${SUBMODULE_PATH}" # Use the extracted path

          echo "Synchronizing submodule configuration (ensures correct URL is used)..."
          git submodule sync # This command processes all submodules based on .gitmodules

          echo "Updating/Initializing submodule to the latest remote commit..."
          git submodule update --init --remote --force "${SUBMODULE_PATH}" # Use the extracted path

          # Optional: Verify the submodule URL (the 'git submodule' commands already use it internally)
          # echo "Verifying the submodule URL after re-init..."
          # git config --get submodule.${SUBMODULE_PATH//\//.}.url || echo "Submodule URL not found in Git config."

      - name: Stage and Commit Submodule Changes to Main Repo
        run: |
          # Re-extract SUBMODULE_PATH for this separate 'run' block, as shell variables
          # are scoped to their respective 'run' commands.
          SUBMODULE_PATH=$(git config --file .gitmodules --get-regexp '^submodule\..*\.path$' | awk '{print $2}')

          if [ -z "$SUBMODULE_PATH" ]; then
            echo "Error: Could not find submodule path in .gitmodules for commit step."
            exit 1
          fi

          if git diff --exit-code "${SUBMODULE_PATH}"; then
            echo "No changes detected in the submodule commit hash. Skipping commit."
          else
            echo "Changes detected in the submodule commit hash. Staging and committing..."
            git add "${SUBMODULE_PATH}" # Use the extracted path
            git commit -m "üîÅ Update translations from Weblate"
            git push
          fi
